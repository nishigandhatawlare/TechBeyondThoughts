// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TechBeyondThoughts.Services.EBookAPI.Data;

#nullable disable

namespace TechBeyondThoughts.Services.EBookAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TechBeyondThoughts.Services.EBookAPI.Models.BookData", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Downloads")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<DateTime>("Published")
                        .HasColumnType("datetime2");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.ToTable("Bookstacks");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Author = "Author 1",
                            Category = "Fiction",
                            Description = "Description 1",
                            Downloads = 100,
                            FileName = "book1.pdf",
                            FilePath = "/storage/book1.pdf",
                            Format = "PDF",
                            ImageUrl = "https://images.unsplash.com/photo-1543002588-bfa74002ed7e?q=80&w=1000&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxleHBsb3JlLWZlZWR8Mnx8fGVufDB8fHx8fA%3D%3D",
                            Pages = 200,
                            Published = new DateTime(2023, 12, 20, 12, 50, 15, 428, DateTimeKind.Local).AddTicks(3175),
                            Rating = 4.5,
                            Title = "Book 1"
                        });
                });

            modelBuilder.Entity("TechBeyondThoughts.Services.EBookAPI.Models.BookPreview", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("PagesToPreview")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.ToTable("BookPreviews");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            PagesToPreview = 5
                        });
                });

            modelBuilder.Entity("TechBeyondThoughts.Services.EBookAPI.Models.DownloadHistory", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DownloadDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.ToTable("DownloadHistory");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            DownloadDateTime = new DateTime(2023, 12, 20, 12, 50, 15, 428, DateTimeKind.Local).AddTicks(3467),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("TechBeyondThoughts.Services.EBookAPI.Models.Rating", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("BookId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            UserId = 1,
                            Value = 4.0
                        });
                });

            modelBuilder.Entity("TechBeyondThoughts.Services.EBookAPI.Models.BookPreview", b =>
                {
                    b.HasOne("TechBeyondThoughts.Services.EBookAPI.Models.BookData", "Book")
                        .WithOne("BookPreview")
                        .HasForeignKey("TechBeyondThoughts.Services.EBookAPI.Models.BookPreview", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("TechBeyondThoughts.Services.EBookAPI.Models.DownloadHistory", b =>
                {
                    b.HasOne("TechBeyondThoughts.Services.EBookAPI.Models.BookData", "Book")
                        .WithMany("DownloadHistory")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("TechBeyondThoughts.Services.EBookAPI.Models.Rating", b =>
                {
                    b.HasOne("TechBeyondThoughts.Services.EBookAPI.Models.BookData", "Book")
                        .WithMany("Ratings")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("TechBeyondThoughts.Services.EBookAPI.Models.BookData", b =>
                {
                    b.Navigation("BookPreview")
                        .IsRequired();

                    b.Navigation("DownloadHistory");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
